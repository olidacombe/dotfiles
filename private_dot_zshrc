#!/usr/bin/env zsh

export EDITOR=nvim
export GPG_TTY=$TTY

# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

OS="$(uname)"

if [ -d "${HOME}/.local/bin" ]; then
    export PATH="${PATH}:${HOME}/.local/bin"
fi

if [ -d "${HOME}/.local/scripts" ]; then
    export PATH="${PATH}:${HOME}/.local/scripts"
fi

export GEM_HOME="$HOME/.gem"

# Path to your oh-my-zsh installation.
export ZSH="${HOME}/.oh-my-zsh"

# Set name of the theme to load --- if set to "random", it will
# load a random theme each time oh-my-zsh is loaded, in which case,
# to know which specific one was loaded, run: echo $RANDOM_THEME
# See https://github.com/ohmyzsh/ohmyzsh/wiki/Themes
# ZSH_THEME="robbyrussell"
ZSH_THEME="powerlevel10k/powerlevel10k"

# Set list of themes to pick from when loading at random
# Setting this variable when ZSH_THEME=random will cause zsh to load
# a theme from this variable instead of looking in $ZSH/themes/
# If set to an empty array, this variable will have no effect.
# ZSH_THEME_RANDOM_CANDIDATES=( "robbyrussell" "agnoster" )

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion.
# Case-sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# Uncomment the following line to disable bi-weekly auto-update checks.
DISABLE_AUTO_UPDATE="true"

# Uncomment the following line to automatically update without prompting.
# DISABLE_UPDATE_PROMPT="true"

# Uncomment the following line to change how often to auto-update (in days).
# export UPDATE_ZSH_DAYS=13

# Uncomment the following line if pasting URLs and other text is messed up.
# DISABLE_MAGIC_FUNCTIONS="true"

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# Caution: this setting can cause issues with multiline prompts (zsh 5.7.1 and newer seem to work)
# See https://github.com/ohmyzsh/ohmyzsh/issues/5765
# COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# You can set one of the optional three formats:
# "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# or set a custom format using the strftime function format specifications,
# see 'man strftime' for details.
# HIST_STAMPS="mm/dd/yyyy"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

export ZSH_TMUX_AUTOSTART=true
export ZSH_TMUX_AUTOCONNECT=false
export ZSH_TMUX_AUTOQUIT=false

# Which plugins would you like to load?
# Standard plugins can be found in $ZSH/plugins/
# Custom plugins may be added to $ZSH_CUSTOM/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=(
    aws
	brew
	direnv
	docker
	fzf
	gcloud
	github
	golang
	ipfs
    kubectl
    kubectx
	nmap
	nomad
	npm
	nvm
	pip
	rust
	salt
	terraform
	vagrant
	vault
	virtualenv
	git
	tmux
	vi-mode
    yarn
	zsh-autosuggestions
	zsh-syntax-highlighting
)

source $ZSH/oh-my-zsh.sh

# Flux
if command -v flux &> /dev/null; then
    . <(flux completion zsh)
fi

# generate this file using `jira-terminal autocompletion --shell zsh > dot_jira_terminal.zsh`
# [ -f ~/.jira_terminal.zsh ] && . ~/.jira_terminal.zsh
[ -f ~/.fzf.zsh ] && . ~/.fzf.zsh
# pocket credentials for automation
[ -f ~/.pocket ] && . ~/.pocket

# User configuration

if [ -f "${HOME}/.zsh_secrets" ]; then
	. "${HOME}/.zsh_secrets"
fi

# keychain
SSH_ADD=ssh-add
if [[ "$OS" = "Darwin" ]]; then
    SSH_ADD=/usr/bin/ssh-add
fi
for KEY in "rsa" "ed25519"; do
    if [ -f "${HOME}/.ssh/id_${KEY}" ]; then
        $SSH_ADD --apple-use-keychain "${HOME}/.ssh/id_${KEY}" 2>/dev/null || true
    fi
done

# export MANPATH="/usr/local/man:$MANPATH"

# You may need to manually set your language environment
# export LANG=en_US.UTF-8

# Preferred editor for local and remote sessions
# if [[ -n $SSH_CONNECTION ]]; then
#   export EDITOR='vim'
# else
#   export EDITOR='mvim'
# fi

# Compilation flags
# export ARCHFLAGS="-arch x86_64"

#  ____ ____ ____ ____ ____ ____ ____ 
# ||k |||e |||y |||m |||a |||p |||s ||
# ||__|||__|||__|||__|||__|||__|||__||
# |/__\|/__\|/__\|/__\|/__\|/__\|/__\|
#
if [[ "$OS" = "Darwin" ]]; then
    bindkey -s Æ’ "~/.local/scripts/tmux-sessionizer.sh\n"
elif [[ "$OS" = "Linux" ]]; then
    bindkey -s "^[f" "~/.local/scripts/tmux-sessionizer.sh\n"
fi

# Set personal aliases, overriding those provided by oh-my-zsh libs,
# plugins, and themes. Aliases can be placed here, though oh-my-zsh
# users are encouraged to define aliases within the ZSH_CUSTOM folder.
# For a full list of active aliases, run `alias`.
#
# Example aliases
# alias zshconfig="mate ~/.zshrc"
# alias ohmyzsh="mate ~/.oh-my-zsh"

#                        __          __    ___      
#                       /\ \        /\ \__/\_ \     
#   ___      __   _ __  \_\ \    ___\ \ ,_\//\ \    
# /' _ `\  /'__`\/\`'__\/'_` \  /'___\ \ \/ \ \ \   
# /\ \/\ \/\  __/\ \ \//\ \L\ \/\ \__/\ \ \_ \_\ \_ 
# \ \_\ \_\ \____\\ \_\\ \___,_\ \____\\ \__\/\____\
#  \/_/\/_/\/____/ \/_/ \/__,_ /\/____/ \/__/\/____/
#                                                   
#                                                   
if command -v lima &> /dev/null; then
        alias docker="lima nerdctl"
fi
alias alpinism='docker run --privileged=true -v $(pwd):/summit -it alpine'
# alias aws='AWS_PROFILE=$(cat ~/.aws/__selected_profile__) aws'
alias code="open -a 'Visual Studio Code'"
alias gcob='git branch -a | fzf | xargs git checkout'
alias gpsh='git push origin HEAD'
alias gupstr='git branch {--set-upstream-to=origin/,}$(git branch --show-current)'
alias gpl='git pull'
alias ghprcp='gh pr view --json url | jq -r .url | pbcopy'
alias jira='jira-terminal'
complete -F __start_jira-terminal jira
alias k="kubectl"
complete -F __start_kubectl k
alias kctx="kubetcx"
alias kj="kubectl get pods -A | sed '1d' | fzf | awk '{ print \$1,\$2 }' | read ns pod; kubectl exec -n \"\$ns\" -it \"\$pod\" -- /bin/sh"
alias kns="kubens"
if [[ "$OS" = "Darwin" ]]; then
    alias sed="gsed"
fi
alias tkl="tsh kube ls -fjson | jq -r '.[]|.kube_cluster_name' | fzf | xargs tsh kube login"

if command -v nvim &> /dev/null; then
        # life is worth living
        alias vi="nvim"
        alias vim="nvim"
fi
#  ____  __.__.__  .__                       
# |    |/ _|__|  | |  |   ___________  ______
# |      < |  |  | |  | _/ __ \_  __ \/  ___/
# |    |  \|  |  |_|  |_\  ___/|  | \/\___ \ 
# |____|__ \__|____/____/\___  >__|  /____  >
#         \/                 \/           \/ 
alias slay="ps -ef | fzf -m | awk '{ print \$2 }' | xargs kill"
alias dkill="docker ps | sed -e '1d' | fzf -m | awk '{ print \$1 }' | xargs docker kill"
# nuke multiple git branches
alias grmb="git branch | grep -v '*' | fzf -m | xargs git branch -D"
alias tmkill='tmux list-sessions | fzf -m | awk -F: "{ print \$1 }" | while read sess; do tmux kill-session -t "$sess"; done'

if [ -d "${HOME}/bin" ]; then
    export PATH="${PATH}:${HOME}/bin"
fi

if [ -d "${HOME}/scripts" ]; then
    export PATH="${PATH}:${HOME}/scripts"
fi

# autojump
[ -f /usr/local/etc/profile.d/autojump.sh ] && . /usr/local/etc/profile.d/autojump.sh

# The next line updates PATH for the Google Cloud SDK.
if [ -f '${HOME}/lib/google-cloud-sdk/path.zsh.inc' ]; then . '${HOME}/lib/google-cloud-sdk/path.zsh.inc'; fi

# The next line enables shell command completion for gcloud.
if [ -f '${HOME}/lib/google-cloud-sdk/completion.zsh.inc' ]; then . '${HOME}/lib/google-cloud-sdk/completion.zsh.inc'; fi

export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

if [ -f "${HOME}/.zephyrrc" ]; then . "${HOME}/.zephyrrc"; fi

if [ -f "${HOME}/export-esp.sh" ]; then . "${HOME}/export-esp.sh"; fi

if [ -e ${HOME}/.nix-profile/etc/profile.d/nix.sh ]; then . ${HOME}/.nix-profile/etc/profile.d/nix.sh; fi # added by Nix installer

# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh

# keychain
if [ "$OS" = "Linux" ]; then
    eval $(keychain --eval --quiet id_ed25519 --agents ssh,gpg)
fi

#THIS MUST BE AT THE END OF THE FILE FOR SDKMAN TO WORK!!!
export SDKMAN_DIR="$HOME/.sdkman"
[[ -s "$HOME/.sdkman/bin/sdkman-init.sh" ]] && source "$HOME/.sdkman/bin/sdkman-init.sh"
